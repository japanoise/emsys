
bound.c,52
int isWordBoundary(5,59
int isParaBoundary(14,442

command.c,597
char *str_replace(str_replace19,391
void editorVersion(65,1759
void editorIndentTabs(71,1940
void editorIndentSpaces(77,2104
void editorRevert(95,2551
uint8_t *orig;orig129,3312
uint8_t *repl;repl130,3327
uint8_t *transformerReplaceString(transformerReplaceString132,3343
void editorReplaceString(136,3438
static int nextOccur(162,4054
void editorQueryReplace(187,4607
#define NEXT_OCCUR(216,5426
void editorCapitalizeRegion(320,7753
void editorWhitespaceCleanup(325,7899
#define ADDCMD(355,8559
void debugUnpair(358,8754
void setupCommands(373,9123
void runCommand(394,9818

find.c,55
void editorFindCallback(4,38
void editorFind(56,1237

main.c,2675
#define _DEFAULT_SOURCE1,0
#define _BSD_SOURCE2,24
#define _GNU_SOURCE3,44
struct editorConfig E;31,533
void die(36,639
void editorUpdateBuffer(47,919
int windowFocusedIdx(53,1052
void editorSwitchWindow(63,1235
void disableRawMode(79,1584
void enableRawMode(86,1784
void editorDeserializeUnicode(109,2526
int editorReadKey(118,2765
int getCursorPosition(413,9935
int getWindowSize(428,10333
void editorInsertChar(443,10676
void editorInsertUnicode(451,10897
void editorInsertNewline(459,11130
void editorOpenLine(474,11522
void editorInsertNewlineAndIndent(482,11678
void editorIndent(494,12007
void editorUnindent(515,12468
void editorDelChar(570,13655
void editorBackSpace(588,14140
void editorKillLine(613,14797
void editorKillLineBackwards(632,15281
void editorRecordKey(667,16033
char *editorRowsToString(editorRowsToString692,16571
void editorOpen(712,16960
void editorSave(740,17618
struct abuf 773,18328
	char *b;b774,18342
	int len;775,18352
#define ABUF_INIT 778,18366
void abAppend(780,18395
void abFree(789,18589
void editorSetScxScy(795,18655
void editorScroll(835,19431
void editorDrawRows(846,19717
void editorDrawStatusBar(868,20312
	#define DEBUG_UNDO 895,21248
	#define DEBUG_UNDO 897,21286
void editorDrawMinibuffer(969,22774
void editorRefreshScreen(982,23145
void editorCursorBottomLine(1030,24543
void editorCursorBottomLineLong(1044,24885
void editorSetStatusMessage(1058,25234
void editorResizeScreen(1066,25424
void editorRecenter(1071,25572
void editorSuspend(1078,25734
void editorResume(1084,25838
uint8_t *editorPrompt(editorPrompt1092,25949
void editorMoveCursor(1253,29608
void bufferEndOfForwardWord(1302,30773
void bufferEndOfBackwardWord(1335,31337
void editorForwardWord(1371,31882
void editorBackWord(1375,31990
void wordTransform(1379,32096
void editorUpcaseWord(1391,32444
void editorDowncaseWord(1395,32586
void editorCapitalCaseWord(1399,32732
void editorDeleteWord(1403,32884
void editorBackspaceWord(1412,33138
void editorBackPara(1421,33396
void editorForwardPara(1448,33788
void editorPipeCmd(1475,34207
void editorGotoLine(1522,35949
void editorTransposeWords(1549,36355
void editorTransposeChars(1581,37206
struct bufferCompletion* getBufferCompletions(1608,37918
void freeBufferCompletion(1629,38666
void presentMultipleOptions(1640,38915
void tabCompleteBuffer(1647,39149
void editorSwitchToNamedBuffer(1698,41019
void editorProcessKeypress(1743,42393
void setupHandlers(2375,56970
struct editorBuffer *newBuffer(newBuffer2381,57100
void destroyBuffer(2405,57566
void initEditor(2411,57676
void editorExecMacro(2430,58145
int main(2455,58819

pipe.c,163
static uint8_t *cmd;cmd14,242
static char *buf;buf15,263
static uint8_t *transformerPipeCmd(transformerPipeCmd17,282
uint8_t *editorPipe(editorPipe60,1309

re.c,2188
#define MAX_REGEXP_OBJECTS 38,1056
#define MAX_CHAR_CLASS_LEN 39,1143
enum { UNUSED,42,1232
enum { UNUSED, DOT,42,1232
enum { UNUSED, DOT, BEGIN,42,1232
enum { UNUSED, DOT, BEGIN, END,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS, DIGIT,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS, DIGIT, NOT_DIGIT,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS, DIGIT, NOT_DIGIT, ALPHA,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS, DIGIT, NOT_DIGIT, ALPHA, NOT_ALPHA,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS, DIGIT, NOT_DIGIT, ALPHA, NOT_ALPHA, WHITESPACE,42,1232
enum { UNUSED, DOT, BEGIN, END, QUESTIONMARK, STAR, PLUS, CHAR, CHAR_CLASS, INV_CHAR_CLASS, DIGIT, NOT_DIGIT, ALPHA, NOT_ALPHA, WHITESPACE, NOT_WHITESPACE,42,1232
typedef struct regex_t44,1405
  unsigned char  type;46,1430
    unsigned char  ch;49,1511
    unsigned char* ccl;50,1580
  } u;51,1649
} regex_t;52,1656
int re_match(73,2336
int re_matchp(78,2471
re_t re_compile(109,2987
void re_print(251,7661
static int matchdigit(291,8565
static int matchalpha(295,8620
static int matchwhitespace(299,8675
static int matchalphanum(303,8735
static int matchrange(307,8829
static int matchdot(317,9096
static int ismetachar(326,9266
static int matchmetachar(331,9394
static int matchcharclass(345,9749
static int matchone(383,10360
static int matchstar(400,10975
static int matchplus(420,11381
static int matchquestion(438,11732
static int matchpattern(459,12121
static int matchpattern(493,12926

region.c,392
void editorSetMark(11,165
int markInvalid(21,412
static void normalizeRegion(34,741
void editorKillRegion(52,1213
void editorCopyRegion(101,2539
void editorYank(137,3354
void editorTransformRegion(172,4075
void editorReplaceRegex(197,4640
void editorStringRectangle(349,8730
void editorCopyRectangle(524,13403
void editorKillRectangle(612,15289
void editorYankRectangle(775,19302

register.c,463
static int getRegisterName(11,182
#define GET_REGISTER(24,473
static void registerMessage(31,883
static void clearRegister(42,1079
void editorJumpToRegister(71,1868
void editorMacroToRegister(115,3215
void editorPointToRegister(131,3869
void editorNumberToRegister(142,4324
void editorRegionToRegister(150,4599
void editorRectRegister(164,5024
void editorIncrementRegister(184,5697
void editorInsertRegister(220,6810
void editorViewRegister(263,8067

row.c,255
void editorUpdateRow(8,112
void editorInsertRow(73,1817
void editorFreeRow(92,2363
void editorDelRow(97,2437
void editorRowInsertChar(106,2696
void editorRowInsertUnicode(116,3019
void editorRowAppendString(126,3436
void editorRowDelChar(135,3715

tab.c,169
uint8_t *tabCompleteFiles(tabCompleteFiles12,187
#define GLOB_TILDE 30,697
static int alnum(89,1857
static int sortstring(94,1999
void editorCompleteWord(100,2151

transform.c,224
#define MKOUTPUT(8,124
uint8_t* transformerUpcase(10,197
uint8_t* transformerDowncase(24,420
uint8_t* transformerCapitalCase(38,645
uint8_t* transformerTransposeChars(59,1042
uint8_t* transformerTransposeWords(72,1300

undo.c,359
void editorDoUndo(10,148
void editorDoRedo(68,1700
struct editorUndo *newUndo(newUndo125,3246
static void freeUndos(142,3634
void clearRedos(154,3840
void clearUndosAndRedos(159,3929
#define ALIGNED(165,4044
void editorUndoAppendChar(167,4104
void editorUndoAppendUnicode(191,4812
void editorUndoBackSpace(214,5606
void editorUndoDelChar(245,6571

unicode.c,393
static int utf8ToUCS(8,168
static ssize_t rune_to_utf8(33,868
static int testCaseUCS(80,1855
static int testCaseReverseUCS(86,2034
static int testCaseStringWidth(105,2570
int unicodeTest(111,2752
int stringWidth(134,3818
int charInStringWidth(146,3999
int utf8_is2Char(161,4294
int utf8_is3Char(165,4364
int utf8_is4Char(169,4434
int utf8_nBytes(173,4504
int utf8_isCont(187,4724

unicodetest.c,15
int main(3,21

wcwidth.c,208
struct interval 65,3296
  int first;66,3314
  int last;67,3327
static int bisearch(71,3404
int mk_wcwidth(123,4936
int mk_wcswidth(271,12215
int mk_wcwidth_cjk(294,12866
int mk_wcswidth_cjk(362,16620

bound.h,27
#define EMSYS_BOUND_H2,22

command.h,29
#define EMSYS_COMMAND_H2,24

dist.sh,12
usage(2,10

emsys.h,4934
#define EMSYS_H 2,16
#define EMSYS_TAB_STOP 11,127
#define EMSYS_VERSION 14,175
#define EMSYS_BUILD_DATE 18,240
#define ESC 21,283
#define CSI 22,302
#define CRLF 23,321
#define ISCTRL(24,341
#define CTRL(26,413
enum editorKey 29,450
	BACKSPACE 30,467
	ARROW_LEFT 31,485
	ARROW_RIGHT,32,505
	ARROW_UP,33,519
	ARROW_DOWN,34,530
	HOME_KEY,35,543
	DEL_KEY,36,554
	END_KEY,37,564
	PAGE_UP,38,574
	PAGE_DOWN,39,584
	UNICODE,40,596
	UNICODE_ERROR,41,606
	END_OF_FILE,42,622
	BEG_OF_FILE,43,636
	QUIT,44,650
	SAVE,45,657
	COPY,46,664
	REDO,47,671
	FORWARD_WORD,48,678
	BACKWARD_WORD,49,693
	FORWARD_PARA,50,709
	BACKWARD_PARA,51,724
	SWITCH_BUFFER,52,740
	NEXT_BUFFER,53,756
	PREVIOUS_BUFFER,54,770
	MARK_BUFFER,55,788
	DELETE_WORD,56,802
	BACKSPACE_WORD,57,816
	OTHER_WINDOW,58,833
	CREATE_WINDOW,59,848
	DESTROY_WINDOW,60,864
	DESTROY_OTHER_WINDOWS,61,881
	KILL_BUFFER,62,905
	MACRO_RECORD,63,919
	MACRO_END,64,934
	MACRO_EXEC,65,946
	ALT_0,66,959
	ALT_1,67,967
	ALT_2,68,975
	ALT_3,69,983
	ALT_4,70,991
	ALT_5,71,999
	ALT_6,72,1007
	ALT_7,73,1015
	ALT_8,74,1023
	ALT_9,75,1031
	SUSPEND,76,1039
	UPCASE_WORD,77,1049
	DOWNCASE_WORD,78,1063
	CAPCASE_WORD,79,1079
	UPCASE_REGION,80,1094
	DOWNCASE_REGION,81,1110
	TRANSPOSE_WORDS,82,1128
	EXEC_CMD,83,1146
	FIND_FILE,84,1157
	WHAT_CURSOR,85,1169
	PIPE_CMD,86,1183
	PREVIEW_PIPE_CMD,87,1194
	QUERY_REPLACE,88,1213
	GOTO_LINE,89,1229
	BACKTAB,90,1241
	SWAP_MARK,91,1251
	JUMP_REGISTER,92,1263
	MACRO_REGISTER,93,1279
	POINT_REGISTER,94,1296
	NUMBER_REGISTER,95,1313
	REGION_REGISTER,96,1331
	INC_REGISTER,97,1349
	INSERT_REGISTER,98,1364
	VIEW_REGISTER,99,1382
	STRING_RECT,100,1398
	COPY_RECT,101,1412
	KILL_RECT,102,1424
	YANK_RECT,103,1436
	RECT_REGISTER,104,1448
	EXPAND,105,1464
enum promptType 108,1477
	PROMPT_BASIC,109,1495
	PROMPT_FILES,110,1510
typedef struct erow 114,1544
	int size;115,1566
	int rsize;116,1577
	int renderwidth;117,1589
	uint8_t *chars;chars118,1607
	uint8_t *render;render119,1624
} erow;120,1642
struct editorUndo 122,1651
        struct editorUndo *prev;prev123,1671
        int startx;124,1704
        int starty;125,1724
        int endx;126,1744
        int endy;127,1762
        int append;128,1780
        int datalen;129,1800
        int datasize;130,1821
        int delete;131,1843
	int paired;132,1863
        uint8_t *data;data133,1876
struct editorBuffer 136,1903
	int indent;137,1925
	int cx,138,1938
	int cx, cy;138,1938
	int markx,139,1951
	int markx, marky;139,1951
	int scx,140,1970
	int scx, scy;140,1970
	int numrows;141,1985
	int rowoff;142,1999
	int end;143,2012
	int dirty;144,2022
	int uarg;145,2034
	int uarg_active;146,2045
	int special_buffer;147,2063
	erow *row;row148,2086
	char *filename;filename149,2098
	uint8_t *query;query150,2115
	uint8_t match;151,2132
        struct editorUndo *undo;undo152,2148
        struct editorUndo *redo;redo153,2181
	struct editorBuffer *next;next154,2214
struct editorWindow 157,2246
	int focused;158,2268
	struct editorBuffer *buf;buf159,2282
struct editorMacro 162,2313
	int *keys;keys163,2334
	int nkeys;164,2346
	int skeys;165,2358
struct editorCommand 170,2396
	char *key;key171,2419
	void (*cmd)cmd172,2431
	UT_hash_handle hh;173,2489
struct bufferCompletion 176,2513
    char **completions;completions177,2539
    int count;178,2563
    int current;179,2578
  char *prefix;prefix180,2595
enum registerType 183,2615
	REGISTER_NULL,184,2635
	REGISTER_REGION,185,2651
	REGISTER_NUMBER,186,2669
	REGISTER_POINT,187,2687
	REGISTER_MACRO,188,2704
	REGISTER_RECTANGLE,189,2721
struct editorPoint 192,2746
	int cx;193,2767
	int cy;194,2776
	struct editorBuffer *buf;buf195,2785
struct editorRectangle 198,2816
	int rx;199,2841
	int ry;200,2850
	uint8_t *rect;rect201,2859
union registerData 204,2879
	uint8_t *region;region205,2900
	int64_t number;206,2918
	struct editorMacro *macro;macro207,2935
	struct editorPoint *point;point208,2963
	struct editorRectangle *rect;rect209,2991
struct editorRegister 212,3026
	enum registerType rtype;213,3050
	union registerData rdata;214,3076
struct editorConfig 217,3107
	uint8_t *kill;kill218,3129
	uint8_t *rectKill;rectKill219,3145
	int rx;220,3165
	int ry;221,3174
	int screenrows;222,3183
	int screencols;223,3200
	uint8_t unicode[unicode224,3217
	int nunicode;225,3238
	char minibuffer[minibuffer226,3253
	time_t statusmsg_time;227,3275
	struct termios orig_termios;228,3299
	struct editorBuffer *firstBuf;firstBuf229,3329
	struct editorBuffer *focusBuf;focusBuf230,3361
	int nwindows;231,3393
	struct editorWindow **windows;windows232,3408
	int recording;233,3440
	struct editorMacro macro;234,3456
	int playback;235,3483
	int micro;236,3498
	struct editorCommand *cmd;cmd237,3510
	struct editorRegister registers[registers238,3538

find.h,26
#define EMSYS_FIND_H2,21

pipe.h,26
#define EMSYS_PIPE_H2,21

re.h,108
#define _TINY_REGEX_C31,1001
#define RE_DOT_MATCHES_NEWLINE 36,1117
typedef struct regex_t* re_t;46,1249

region.h,29
#define EMSYS_REGION_H 2,23

register.h,24
#define REGISTER_H2,19

row.h,25
#define EMSYS_ROW_H2,20

subprocess.h,3817
#define SHEREDOM_SUBPROCESS_H_INCLUDED34,1430
#define subprocess_pure52,1786
#define subprocess_weak 53,1810
#define subprocess_pure 55,1889
#define subprocess_weak 56,1935
enum subprocess_option_e 63,2069
  subprocess_option_combined_stdout_stderr 65,2138
  subprocess_option_inherit_environment 68,2268
  subprocess_option_enable_async 71,2391
  subprocess_option_no_window 75,2534
  subprocess_option_search_user_path 80,2788
#define SUBPROCESS_CAST(209,8501
#define SUBPROCESS_PTR_CAST(210,8555
#define SUBPROCESS_CONST_CAST(211,8618
#define SUBPROCESS_NULL 212,8677
#define SUBPROCESS_CAST(214,8712
#define SUBPROCESS_PTR_CAST(215,8757
#define SUBPROCESS_CONST_CAST(216,8806
#define SUBPROCESS_NULL 217,8857
typedef __int64 subprocess_intptr_t;233,9105
typedef unsigned __int64 subprocess_size_t;234,9142
typedef int subprocess_intptr_t;236,9192
typedef unsigned int subprocess_size_t;237,9225
typedef intptr_t subprocess_intptr_t;242,9301
typedef size_t subprocess_size_t;243,9339
typedef struct _PROCESS_INFORMATION *LPPROCESS_INFORMATION;LPPROCESS_INFORMATION251,9493
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES252,9553
typedef struct _STARTUPINFOA *LPSTARTUPINFOA;LPSTARTUPINFOA253,9613
typedef struct _OVERLAPPED *LPOVERLAPPED;LPOVERLAPPED254,9659
struct subprocess_subprocess_information_s 261,9781
  void *hProcess;hProcess262,9826
  void *hThread;hThread263,9844
  unsigned long dwProcessId;264,9861
  unsigned long dwThreadId;265,9890
struct subprocess_security_attributes_s 268,9922
  unsigned long nLength;269,9964
  void *lpSecurityDescriptor;lpSecurityDescriptor270,9989
  int bInheritHandle;271,10019
struct subprocess_startup_info_s 274,10045
  unsigned long cb;275,10080
  char *lpReserved;lpReserved276,10100
  char *lpDesktop;lpDesktop277,10120
  char *lpTitle;lpTitle278,10139
  unsigned long dwX;279,10156
  unsigned long dwY;280,10177
  unsigned long dwXSize;281,10198
  unsigned long dwYSize;282,10223
  unsigned long dwXCountChars;283,10248
  unsigned long dwYCountChars;284,10279
  unsigned long dwFillAttribute;285,10310
  unsigned long dwFlags;286,10343
  unsigned short wShowWindow;287,10368
  unsigned short cbReserved2;288,10398
  unsigned char *lpReserved2;lpReserved2289,10428
  void *hStdInput;hStdInput290,10458
  void *hStdOutput;hStdOutput291,10477
  void *hStdError;hStdError292,10497
struct subprocess_overlapped_s 295,10520
  uintptr_t Internal;296,10553
  uintptr_t InternalHigh;297,10575
      unsigned long Offset;300,10624
      unsigned long OffsetHigh;301,10652
    } DUMMYSTRUCTNAME;302,10684
    void *Pointer;Pointer303,10707
  } DUMMYUNIONNAME;304,10726
  void *hEvent;hEvent306,10747
__declspec(311,10789
#define SUBPROCESS_DLLIMPORT 346,13052
#define SUBPROCESS_DLLIMPORT348,13109
typedef size_t subprocess_size_t;367,13558
struct subprocess_s 374,13698
  FILE *stdin_file;stdin_file375,13720
  FILE *stdout_file;stdout_file376,13740
  FILE *stderr_file;stderr_file377,13761
  void *hProcess;hProcess380,13805
  void *hStdInput;hStdInput381,13823
  void *hEventOutput;hEventOutput382,13842
  void *hEventError;hEventError383,13864
  pid_t child;385,13891
  int return_status;386,13906
  subprocess_size_t alive;389,13935
int subprocess_create_named_pipe_helper(397,14120
int subprocess_create(447,15909
int subprocess_create_ex(453,16157
FILE *subprocess_stdin(subprocess_stdin887,28422
FILE *subprocess_stdout(subprocess_stdout891,28522
FILE *subprocess_stderr(subprocess_stderr895,28624
int subprocess_join(903,28825
int subprocess_destroy(963,30035
int subprocess_terminate(1002,30854
unsigned subprocess_read_stdout(1020,31328
unsigned subprocess_read_stderr(1065,32742
int subprocess_alive(1110,34155

tab.h,20
#define TAB_H 2,14

transform.h,31
#define EMSYS_TRANSFORM_H2,26

undo.h,27
#define EMSYS_UNDO_H 2,21

unused.h,46
#  define UNUSED(2,16
#  define UNUSED(4,83

uthash.h,4946
#define UTHASH_H25,1164
#define UTHASH_VERSION 27,1182
typedef unsigned int uint32_t;36,1565
typedef unsigned char uint8_t;37,1596
#define DECLTYPE(50,2191
#define NO_DECLTYPE52,2293
#define NO_DECLTYPE55,2415
#define DECLTYPE(57,2494
#define DECLTYPE(62,2562
#define DECLTYPE_ASSIGN(63,2582
#define DECLTYPE_ASSIGN(69,2932
#define uthash_malloc(76,3223
#define uthash_free(79,3330
#define uthash_bzero(82,3438
#define uthash_strlen(85,3510
#define HASH_FUNCTION(89,3575
#define HASH_KEYCMP(93,3678
#define uthash_noexpand_fyi(97,3755
#define uthash_expand_fyi(100,3868
#define HASH_NONFATAL_OOM 104,3982
#define uthash_nonfatal_oom(111,4113
#define HASH_RECORD_OOM(114,4199
#define IF_HASH_NONFATAL_OOM(115,4260
#define uthash_fatal(121,4393
#define HASH_RECORD_OOM(124,4465
#define IF_HASH_NONFATAL_OOM(125,4526
#define HASH_INITIAL_NUM_BUCKETS 130,4599
#define HASH_INITIAL_NUM_BUCKETS_LOG2 131,4679
#define HASH_BKT_CAPACITY_THRESH 132,4759
#define ELMT_FROM_HH(135,4901
#define HH_FROM_ELMT(137,5029
#define HASH_ROLLBACK_BKT(139,5118
#define HASH_VALUE(149,5795
#define HASH_FIND_BYHASHVALUE(154,6057
#define HASH_FIND(166,6929
#define HASH_BLOOM_BITLEN 177,7624
#define HASH_BLOOM_BYTELEN 178,7670
#define HASH_BLOOM_MAKE(179,7768
#define HASH_BLOOM_FREE(191,8611
#define HASH_BLOOM_BITSET(196,8873
#define HASH_BLOOM_BITTEST(197,8944
#define HASH_BLOOM_ADD(199,9016
#define HASH_BLOOM_TEST(202,9195
#define HASH_BLOOM_MAKE(206,9381
#define HASH_BLOOM_FREE(207,9416
#define HASH_BLOOM_ADD(208,9445
#define HASH_BLOOM_TEST(209,9479
#define HASH_BLOOM_BYTELEN 210,9518
#define HASH_MAKE_TABLE(213,9556
#define HASH_REPLACE_BYHASHVALUE_INORDER(245,12059
#define HASH_REPLACE_BYHASHVALUE(255,12780
#define HASH_REPLACE(265,13470
#define HASH_REPLACE_INORDER(272,13903
#define HASH_APPEND_LIST(279,14352
#define HASH_AKBI_INNER_LOOP(287,14863
#undef HASH_AKBI_INNER_LOOP297,15476
#define HASH_AKBI_INNER_LOOP(298,15504
#define HASH_ADD_TO_TABLE(314,16460
#define HASH_ADD_TO_TABLE(338,18140
#define HASH_ADD_KEYPTR_BYHASHVALUE_INORDER(351,18826
#define HASH_ADD_KEYPTR_INORDER(384,21420
#define HASH_ADD_BYHASHVALUE_INORDER(391,21859
#define HASH_ADD_INORDER(394,22049
#define HASH_ADD_KEYPTR_BYHASHVALUE(397,22214
#define HASH_ADD_KEYPTR(418,23804
#define HASH_ADD_BYHASHVALUE(425,24232
#define HASH_ADD(428,24402
#define HASH_TO_BKT(431,24551
#define HASH_DELETE(448,25489
#define HASH_DELETE_HH(451,25617
#define HASH_FIND_STR(481,27926
#define HASH_ADD_STR(486,28270
#define HASH_REPLACE_STR(491,28614
#define HASH_FIND_INT(496,28958
#define HASH_ADD_INT(498,29088
#define HASH_REPLACE_INT(500,29218
#define HASH_FIND_PTR(502,29361
#define HASH_ADD_PTR(504,29494
#define HASH_REPLACE_PTR(506,29627
#define HASH_DEL(508,29773
#define HASH_OOPS(516,30121
#define HASH_FSCK(517,30201
#define HASH_FSCK(566,34120
#define HASH_EMIT_KEY(573,34411
#define HASH_EMIT_KEY(580,34844
#define HASH_BER(584,34982
#define HASH_SAX(597,35806
#define HASH_FNV(607,36505
#define HASH_OAT(618,37265
#define HASH_JEN_MIX(633,38357
#define HASH_JEN(646,39283
#undef get16bits688,42568
#define get16bits(691,42741
#define get16bits(695,42823
#define HASH_SFH(698,42977
#define HASH_FIND_IN_BKT(744,46623
#define HASH_ADD_TO_BKT(766,48244
#define HASH_DEL_IN_BKT(788,49879
#define HASH_EXPAND_BUCKETS(832,52411
#define HASH_SORT(888,56789
#define HASH_SRT(889,56845
#define HASH_SELECT(978,63972
#define HASH_CLEAR(1036,68640
#define HASH_OVERHEAD(1047,69400
#define HASH_ITER(1055,69875
#define HASH_ITER(1059,70145
#define HASH_COUNT(1065,70446
#define HASH_CNT(1066,70489
typedef struct UT_hash_bucket 1068,70564
   struct UT_hash_handle *hh_head;hh_head1069,70596
   unsigned count;1070,70631
   unsigned expand_mult;1084,71490
} UT_hash_bucket;1086,71516
#define HASH_SIGNATURE 1089,71609
#define HASH_BLOOM_SIGNATURE 1090,71644
typedef struct UT_hash_table 1092,71686
   UT_hash_bucket *buckets;buckets1093,71717
   unsigned num_buckets,1094,71745
   unsigned num_buckets, log2_num_buckets;1094,71745
   unsigned num_items;1095,71788
   struct UT_hash_handle *tail;tail1096,71811
   ptrdiff_t hho;1097,71890
   unsigned ideal_chain_maxlen;1101,72126
   unsigned nonideal_items;1106,72398
   unsigned ineff_expands,1114,72875
   unsigned ineff_expands, noexpand;1114,72875
   uint32_t signature;1116,72913
   uint32_t bloom_sig;1118,73011
   uint8_t *bloom_bv;bloom_bv1119,73092
   uint8_t bloom_nbits;1120,73114
} UT_hash_table;1123,73146
typedef struct UT_hash_handle 1125,73164
   struct UT_hash_table *tbl;tbl1126,73196
   void *prev;prev1127,73226
   void *next;next1128,73300
   struct UT_hash_handle *hh_prev;hh_prev1129,73374
   struct UT_hash_handle *hh_next;hh_next1130,73448
   const void *key;key1131,73522
   unsigned keylen;1132,73596
   unsigned hashv;1133,73670
} UT_hash_handle;1134,73744

wcwidth.h,0

unicode.h,0

fixws.sh,0
